import { type User, type InsertUser, type Transaction, type InsertTransaction, type Supplier, type InsertSupplier, type SupplierPayment, type InsertSupplierPayment } from "../shared/schema";
declare class DatabaseStorage {
    getUserByUsername(username: string): Promise<any | null>;
    getUserById(id: number): Promise<User | null>;
    createUser(data: InsertUser): Promise<User>;
    getAllUsers(): Promise<User[]>;
    createTransaction(data: InsertTransaction): Promise<Transaction>;
    getTransaction(id: number): Promise<Transaction | null>;
    getTransactions(limit?: number, offset?: number): Promise<Transaction[]>;
    getTransactionsByDateRange(startDate: Date, endDate: Date): Promise<Transaction[]>;
    updateTransaction(id: number, data: Partial<InsertTransaction>): Promise<Transaction | null>;
    deleteTransaction(id: number): Promise<boolean>;
    searchTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]>;
    createSupplier(data: InsertSupplier): Promise<Supplier>;
    getSupplier(id: number): Promise<Supplier | null>;
    getSuppliers(limit?: number, offset?: number): Promise<Supplier[]>;
    updateSupplier(id: number, data: Partial<InsertSupplier>): Promise<Supplier | null>;
    deleteSupplier(id: number): Promise<boolean>;
    createSupplierPayment(data: InsertSupplierPayment): Promise<SupplierPayment>;
    getSupplierPayment(id: number): Promise<SupplierPayment | null>;
    updateSupplierPayment(id: number, data: Partial<InsertSupplierPayment>): Promise<SupplierPayment | null>;
    deleteSupplierPayment(id: number): Promise<boolean>;
    getSupplierExpenditureSummary(): Promise<any[]>;
    getBill(id: number): Promise<any | null>;
    getBillsByDateRange(startDate: Date, endDate: Date): Promise<any[]>;
    searchBills(query: string): Promise<any[]>;
    updateBill(id: number, data: any): Promise<any | null>;
    deleteBill(id: number): Promise<boolean>;
    createNotification(data: any): Promise<any>;
    markNotificationAsRead(id: number): Promise<any | null>;
    deleteNotification(id: number): Promise<boolean>;
    createInventoryItem(data: any): Promise<any>;
    getInventoryItem(id: number): Promise<any | null>;
    updateInventoryItem(id: number, data: any): Promise<any | null>;
    deleteInventoryItem(id: number): Promise<boolean>;
    searchInventoryItems(query: string): Promise<any[]>;
    createPurchaseOrder(data: any): Promise<any>;
    getPurchaseOrder(id: number): Promise<any | null>;
    updatePurchaseOrder(id: number, data: any): Promise<any | null>;
    deletePurchaseOrder(id: number): Promise<boolean>;
    createSetting(data: any): Promise<any>;
    getSettings(userId?: number): Promise<any[]>;
    updateSetting(id: number, data: any): Promise<any | null>;
    deleteSetting(id: number): Promise<boolean>;
    createActivityLog(data: any): Promise<any>;
    getActivityLogs(userId?: number): Promise<any[]>;
    getExpenditure(id: number): Promise<any | null>;
    createExpenditure(data: any): Promise<any>;
    updateExpenditure(id: number, data: any): Promise<any | null>;
    deleteExpenditure(id: number): Promise<boolean>;
    getExpendituresByDateRangeForShop(shopId: string, startDate: Date, endDate: Date): Promise<any[]>;
    getPermissions(role?: string): Promise<any[]>;
    updatePermission(id: number, data: any): Promise<any | null>;
    createGroupedExpenditure(data: any): Promise<any>;
    getGroupedExpenditure(id: number): Promise<any>;
    updateGroupedExpenditure(id: number, data: any): Promise<any>;
    deleteGroupedExpenditure(id: number): Promise<boolean>;
    getGroupedExpendituresByDateRange(startDate: Date, endDate: Date): Promise<any[]>;
    searchGroupedExpenditures(search: string): Promise<any[]>;
    createGroupedExpenditurePayment(data: any): Promise<any>;
    getGroupedExpenditurePayments(groupedExpenditureId: number): Promise<any[]>;
    deleteGroupedExpenditurePayment(id: number): Promise<boolean>;
    createReport(data: any): Promise<any>;
    getReports(startDate?: string, endDate?: string): Promise<any>;
    getReport(id: number): Promise<any | null>;
    updateReport(id: number, data: any): Promise<any | null>;
    deleteReport(id: number): Promise<boolean>;
}
export declare function ensureDefaultUser(username: string, password: string, role: string): Promise<void>;
export declare const storage: DatabaseStorage;
export default storage;
//# sourceMappingURL=storage.d.ts.map