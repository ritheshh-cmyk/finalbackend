declare class DatabaseStorage {
    getUserByUsername(username: string): Promise<any | null>;
    getUserById(id: number): Promise<any | null>;
    createUser(data: any): Promise<any>;
    getAllUsers(): Promise<any[]>;
    updateUser(id: number, data: any): Promise<any | null>;
    deleteUser(id: number): Promise<boolean>;
    getTodayStats(): Promise<any>;
    getWeekStats(): Promise<any>;
    getMonthStats(): Promise<any>;
    getYearStats(): Promise<any>;
    getDashboardTotals(): Promise<any>;
    getWeeklyStatistics(): Promise<any[]>;
    getRecentTransactions(limit?: number): Promise<any[]>;
    getTopSuppliers(limit?: number): Promise<any[]>;
    getBills(limit?: number, offset?: number): Promise<any[]>;
    getExpenditures(limit?: number, offset?: number): Promise<any[]>;
    getSupplierPayments(supplierId?: number): Promise<any[]>;
    getGroupedExpenditures(limit?: number, offset?: number): Promise<any[]>;
    getPurchaseOrders(limit?: number, offset?: number): Promise<any[]>;
    getNotifications(userId?: number): Promise<any[]>;
    getUserSettings(userId?: number): Promise<any>;
    getActivityLog(userId?: number): Promise<any[]>;
    searchTransactions(query: string): Promise<any[]>;
    searchSuppliers(query: string): Promise<any[]>;
    searchInventory(query: string): Promise<any[]>;
    getAllPermissions(): Promise<any[]>;
    getAllReports(): Promise<any[]>;
    getReportsByDateRange(dateRange: string): Promise<any[]>;
    createTransaction(data: any): Promise<any>;
    createInventoryItem(data: any): Promise<any>;
    createSupplier(data: any): Promise<any>;
    createSupplierPayment(data: any): Promise<any>;
    getTransaction(id: number): Promise<any | null>;
    getTransactions(limit?: number, offset?: number): Promise<any[]>;
    updateTransaction(id: number, data: any): Promise<any | null>;
    deleteTransaction(id: number): Promise<boolean>;
    getSuppliers(limit?: number, offset?: number): Promise<any[]>;
    updateSupplier(id: number, data: any): Promise<any | null>;
    deleteSupplier(id: number): Promise<boolean>;
    getSupplierExpenditureSummary(): Promise<any>;
    createExpenditure(data: any): Promise<any>;
    updateExpenditure(id: number, data: any): Promise<any>;
    deleteExpenditure(id: number): Promise<boolean>;
    createBill(data: any): Promise<any>;
    getBill(id: number): Promise<any | null>;
    updateBill(id: number, data: any): Promise<any | null>;
    deleteBill(id: number): Promise<boolean>;
    createGroupedExpenditure(data: any): Promise<any>;
    getGroupedExpenditure(id: number): Promise<any>;
    updateGroupedExpenditure(id: number, data: any): Promise<any>;
    deleteGroupedExpenditure(id: number): Promise<boolean>;
    createGroupedExpenditurePayment(data: any): Promise<any>;
    getGroupedExpenditurePayments(groupedExpenditureId: number): Promise<any[]>;
    deleteGroupedExpenditurePayment(id: number): Promise<boolean>;
    searchGroupedExpenditures(search: string): Promise<any[]>;
    getGroupedExpendituresByDateRange(startDate: Date, endDate: Date): Promise<any[]>;
    getBillsByDateRange(startDate: Date, endDate: Date): Promise<any[]>;
    searchBills(query: string): Promise<any[]>;
    backupShopData(shopId: string): Promise<any>;
    restoreShopData(shopId: string, data: any): Promise<void>;
    getTransactionsByDateRangeForShop(shopId: string, startDate: Date, endDate: Date): Promise<any[]>;
    getBillsByDateRangeForShop(shopId: string, startDate: Date, endDate: Date): Promise<any[]>;
    getExpendituresByDateRangeForShop(shopId: string, startDate: Date, endDate: Date): Promise<any[]>;
    saveFeedback(billId: string, feedback: string): Promise<void>;
    getFeedback(billId: string): Promise<string | null>;
    clearAllData(): Promise<{
        success: boolean;
        message: string;
    }>;
}
export declare function ensureDefaultUser(username: string, password: string, role: string): Promise<void>;
export declare const storage: DatabaseStorage;
export default storage;
//# sourceMappingURL=storage.d.ts.map