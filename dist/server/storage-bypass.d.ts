import { type User, type InsertUser, type Transaction, type InsertTransaction, type Supplier, type InsertSupplier, type Expenditure, type InsertExpenditure, type GroupedExpenditure, type InsertGroupedExpenditure } from "../shared/schema";
export declare class DatabaseStorage {
    getUserByUsername(username: string): Promise<any | null>;
    getUserById(id: number): Promise<User | null>;
    createUser(data: InsertUser): Promise<User>;
    getAllUsers(): Promise<User[]>;
    updateUser(id: number, data: any): Promise<User | null>;
    deleteUser(id: number): Promise<boolean>;
    createTransaction(data: InsertTransaction): Promise<Transaction>;
    getTransaction(id: number): Promise<Transaction | null>;
    getTransactions(limit?: number, offset?: number): Promise<Transaction[]>;
    getTransactionsByDateRange(startDate: Date, endDate: Date): Promise<Transaction[]>;
    updateTransaction(id: number, data: Partial<InsertTransaction>): Promise<Transaction | null>;
    deleteTransaction(id: number): Promise<boolean>;
    searchTransactions(query: string): Promise<Transaction[]>;
    createSupplier(data: InsertSupplier): Promise<Supplier>;
    getSupplier(id: number): Promise<Supplier | null>;
    getSuppliers(limit?: number, offset?: number): Promise<Supplier[]>;
    searchSuppliers(query: string): Promise<Supplier[]>;
    updateSupplier(id: number, data: Partial<InsertSupplier>): Promise<Supplier | null>;
    deleteSupplier(id: number): Promise<boolean>;
    createExpenditure(data: InsertExpenditure): Promise<Expenditure>;
    getExpenditure(id: number): Promise<Expenditure | null>;
    getExpenditures(limit?: number, offset?: number): Promise<Expenditure[]>;
    updateExpenditure(id: number, data: Partial<InsertExpenditure>): Promise<Expenditure | null>;
    deleteExpenditure(id: number): Promise<boolean>;
    createGroupedExpenditure(data: InsertGroupedExpenditure): Promise<GroupedExpenditure>;
    getGroupedExpenditures(limit?: number, offset?: number): Promise<GroupedExpenditure[]>;
    getGroupedExpenditure(id: number): Promise<GroupedExpenditure | null>;
    updateGroupedExpenditure(id: number, data: Partial<InsertGroupedExpenditure>): Promise<GroupedExpenditure | null>;
    deleteGroupedExpenditure(id: number): Promise<boolean>;
    getTodayStats(): Promise<any>;
    getWeekStats(): Promise<any>;
    getMonthStats(): Promise<any>;
    getYearStats(): Promise<any>;
    getDashboardTotals(): Promise<any>;
    getWeeklyStatistics(): Promise<any[]>;
    getRecentTransactions(limit?: number): Promise<any[]>;
    getTopSuppliers(limit?: number): Promise<any[]>;
    getBills(limit?: number, offset?: number): Promise<any[]>;
    getSupplierPayments(supplierId?: number): Promise<any[]>;
    getPurchaseOrders(limit?: number, offset?: number): Promise<any[]>;
    getNotifications(userId?: number): Promise<any[]>;
    getUserSettings(userId?: number): Promise<any[]>;
    getActivityLog(userId?: number): Promise<any[]>;
    searchInventory(query: string): Promise<any[]>;
    getAllPermissions(): Promise<any[]>;
    getAllReports(): Promise<any[]>;
    getReportsByDateRange(dateRange: string): Promise<any[]>;
    searchTransactionsByDateRange(startDate: string, endDate: string): Promise<Transaction[]>;
    getInventoryItems(limit?: number, offset?: number): Promise<any[]>;
}
export declare function ensureDefaultUser(username: string, password: string, role: string): Promise<void>;
export declare const storage: DatabaseStorage;
export default storage;
//# sourceMappingURL=storage-bypass.d.ts.map