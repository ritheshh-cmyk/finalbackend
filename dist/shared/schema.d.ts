import { z } from "zod";
export declare const users: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "users";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "users";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        username: import("drizzle-orm/pg-core").PgColumn<{
            name: "username";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        password: import("drizzle-orm/pg-core").PgColumn<{
            name: "password";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        role: import("drizzle-orm/pg-core").PgColumn<{
            name: "role";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const transactions: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "transactions";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "transactions";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        customerName: import("drizzle-orm/pg-core").PgColumn<{
            name: "customer_name";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        mobileNumber: import("drizzle-orm/pg-core").PgColumn<{
            name: "mobile_number";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        deviceModel: import("drizzle-orm/pg-core").PgColumn<{
            name: "device_model";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        repairType: import("drizzle-orm/pg-core").PgColumn<{
            name: "repair_type";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        repairCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "repair_cost";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        actualCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "actual_cost";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        profit: import("drizzle-orm/pg-core").PgColumn<{
            name: "profit";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amountGiven: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount_given";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        changeReturned: import("drizzle-orm/pg-core").PgColumn<{
            name: "change_returned";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        externalStoreName: import("drizzle-orm/pg-core").PgColumn<{
            name: "external_store_name";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        externalItemName: import("drizzle-orm/pg-core").PgColumn<{
            name: "external_item_name";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        externalItemCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "external_item_cost";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        internalCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "internal_cost";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        freeGlassInstallation: import("drizzle-orm/pg-core").PgColumn<{
            name: "free_glass_installation";
            tableName: "transactions";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        remarks: import("drizzle-orm/pg-core").PgColumn<{
            name: "remarks";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        requiresInventory: import("drizzle-orm/pg-core").PgColumn<{
            name: "requires_inventory";
            tableName: "transactions";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        supplierName: import("drizzle-orm/pg-core").PgColumn<{
            name: "supplier_name";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        partsCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "parts_cost";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        customSupplierName: import("drizzle-orm/pg-core").PgColumn<{
            name: "custom_supplier_name";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        externalPurchases: import("drizzle-orm/pg-core").PgColumn<{
            name: "external_purchases";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "transactions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "transactions";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const inventoryItems: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "inventory_items";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "inventory_items";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        partName: import("drizzle-orm/pg-core").PgColumn<{
            name: "part_name";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        partType: import("drizzle-orm/pg-core").PgColumn<{
            name: "part_type";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        compatibleDevices: import("drizzle-orm/pg-core").PgColumn<{
            name: "compatible_devices";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        cost: import("drizzle-orm/pg-core").PgColumn<{
            name: "cost";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        sellingPrice: import("drizzle-orm/pg-core").PgColumn<{
            name: "selling_price";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        quantity: import("drizzle-orm/pg-core").PgColumn<{
            name: "quantity";
            tableName: "inventory_items";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        supplier: import("drizzle-orm/pg-core").PgColumn<{
            name: "supplier";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "inventory_items";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "inventory_items";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const suppliers: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "suppliers";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "suppliers";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        name: import("drizzle-orm/pg-core").PgColumn<{
            name: "name";
            tableName: "suppliers";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        contactNumber: import("drizzle-orm/pg-core").PgColumn<{
            name: "contact_number";
            tableName: "suppliers";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: 20;
        }>;
        address: import("drizzle-orm/pg-core").PgColumn<{
            name: "address";
            tableName: "suppliers";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "suppliers";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "suppliers";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const purchaseOrders: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "purchase_orders";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "purchase_orders";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        supplierId: import("drizzle-orm/pg-core").PgColumn<{
            name: "supplier_id";
            tableName: "purchase_orders";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        itemName: import("drizzle-orm/pg-core").PgColumn<{
            name: "item_name";
            tableName: "purchase_orders";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        quantity: import("drizzle-orm/pg-core").PgColumn<{
            name: "quantity";
            tableName: "purchase_orders";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        unitCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "unit_cost";
            tableName: "purchase_orders";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        totalCost: import("drizzle-orm/pg-core").PgColumn<{
            name: "total_cost";
            tableName: "purchase_orders";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "purchase_orders";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "purchase_orders";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        orderDate: import("drizzle-orm/pg-core").PgColumn<{
            name: "order_date";
            tableName: "purchase_orders";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        receivedDate: import("drizzle-orm/pg-core").PgColumn<{
            name: "received_date";
            tableName: "purchase_orders";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const supplierPayments: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "supplier_payments";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "supplier_payments";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        supplierId: import("drizzle-orm/pg-core").PgColumn<{
            name: "supplier_id";
            tableName: "supplier_payments";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "supplier_payments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "supplier_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        description: import("drizzle-orm/pg-core").PgColumn<{
            name: "description";
            tableName: "supplier_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "supplier_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentDate: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_date";
            tableName: "supplier_payments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const expenditures: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "expenditures";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "expenditures";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        description: import("drizzle-orm/pg-core").PgColumn<{
            name: "description";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        category: import("drizzle-orm/pg-core").PgColumn<{
            name: "category";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        recipient: import("drizzle-orm/pg-core").PgColumn<{
            name: "recipient";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        items: import("drizzle-orm/pg-core").PgColumn<{
            name: "items";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paidAmount: import("drizzle-orm/pg-core").PgColumn<{
            name: "paid_amount";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        remainingAmount: import("drizzle-orm/pg-core").PgColumn<{
            name: "remaining_amount";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "expenditures";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const groupedExpenditures: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "grouped_expenditures";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "grouped_expenditures";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        providerName: import("drizzle-orm/pg-core").PgColumn<{
            name: "provider_name";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        category: import("drizzle-orm/pg-core").PgColumn<{
            name: "category";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        totalAmount: import("drizzle-orm/pg-core").PgColumn<{
            name: "total_amount";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        periodStart: import("drizzle-orm/pg-core").PgColumn<{
            name: "period_start";
            tableName: "grouped_expenditures";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        periodEnd: import("drizzle-orm/pg-core").PgColumn<{
            name: "period_end";
            tableName: "grouped_expenditures";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        description: import("drizzle-orm/pg-core").PgColumn<{
            name: "description";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "grouped_expenditures";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "grouped_expenditures";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const groupedExpenditurePayments: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "grouped_expenditure_payments";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "grouped_expenditure_payments";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        groupedExpenditureId: import("drizzle-orm/pg-core").PgColumn<{
            name: "grouped_expenditure_id";
            tableName: "grouped_expenditure_payments";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "grouped_expenditure_payments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "grouped_expenditure_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentDate: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_date";
            tableName: "grouped_expenditure_payments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        description: import("drizzle-orm/pg-core").PgColumn<{
            name: "description";
            tableName: "grouped_expenditure_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        shop_id: import("drizzle-orm/pg-core").PgColumn<{
            name: "shop_id";
            tableName: "grouped_expenditure_payments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "grouped_expenditure_payments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const insertTransactionSchema: z.ZodObject<{
    customerName: z.ZodString;
    mobileNumber: z.ZodString;
    deviceModel: z.ZodString;
    repairType: z.ZodString;
    repairCost: z.ZodNumber;
    actualCost: z.ZodOptional<z.ZodNumber>;
    profit: z.ZodOptional<z.ZodNumber>;
    amountGiven: z.ZodNumber;
    changeReturned: z.ZodNumber;
    paymentMethod: z.ZodString;
    externalStoreName: z.ZodOptional<z.ZodString>;
    externalItemName: z.ZodOptional<z.ZodString>;
    externalItemCost: z.ZodOptional<z.ZodNumber>;
    externalPurchases: z.ZodOptional<z.ZodArray<z.ZodObject<{
        store: z.ZodString;
        item: z.ZodString;
        cost: z.ZodNumber;
        customStore: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        cost?: number;
        store?: string;
        item?: string;
        customStore?: string;
    }, {
        cost?: number;
        store?: string;
        item?: string;
        customStore?: string;
    }>, "many">>;
    internalCost: z.ZodOptional<z.ZodNumber>;
    freeGlassInstallation: z.ZodOptional<z.ZodBoolean>;
    remarks: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodString>;
    requiresInventory: z.ZodOptional<z.ZodBoolean>;
    supplierName: z.ZodOptional<z.ZodString>;
    partsCost: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        cost: z.ZodOptional<z.ZodNumber>;
        quantity: z.ZodOptional<z.ZodNumber>;
        store: z.ZodOptional<z.ZodString>;
        item: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string;
        cost?: number;
        quantity?: number;
        store?: string;
        item?: string;
    }, {
        name?: string;
        cost?: number;
        quantity?: number;
        store?: string;
        item?: string;
    }>, "many">]>>;
    customSupplierName: z.ZodOptional<z.ZodString>;
    repairServiceType: z.ZodOptional<z.ZodEnum<["internal", "external"]>>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    customerName?: string;
    mobileNumber?: string;
    deviceModel?: string;
    repairType?: string;
    repairCost?: number;
    actualCost?: number;
    profit?: number;
    amountGiven?: number;
    changeReturned?: number;
    paymentMethod?: string;
    externalStoreName?: string;
    externalItemName?: string;
    externalItemCost?: number;
    internalCost?: number;
    freeGlassInstallation?: boolean;
    remarks?: string;
    status?: string;
    requiresInventory?: boolean;
    supplierName?: string;
    partsCost?: number | {
        name?: string;
        cost?: number;
        quantity?: number;
        store?: string;
        item?: string;
    }[];
    customSupplierName?: string;
    externalPurchases?: {
        cost?: number;
        store?: string;
        item?: string;
        customStore?: string;
    }[];
    repairServiceType?: "internal" | "external";
}, {
    shop_id?: string;
    customerName?: string;
    mobileNumber?: string;
    deviceModel?: string;
    repairType?: string;
    repairCost?: number;
    actualCost?: number;
    profit?: number;
    amountGiven?: number;
    changeReturned?: number;
    paymentMethod?: string;
    externalStoreName?: string;
    externalItemName?: string;
    externalItemCost?: number;
    internalCost?: number;
    freeGlassInstallation?: boolean;
    remarks?: string;
    status?: string;
    requiresInventory?: boolean;
    supplierName?: string;
    partsCost?: number | {
        name?: string;
        cost?: number;
        quantity?: number;
        store?: string;
        item?: string;
    }[];
    customSupplierName?: string;
    externalPurchases?: {
        cost?: number;
        store?: string;
        item?: string;
        customStore?: string;
    }[];
    repairServiceType?: "internal" | "external";
}>;
export declare const insertInventoryItemSchema: z.ZodObject<{
    partName: z.ZodString;
    partType: z.ZodString;
    compatibleDevices: z.ZodOptional<z.ZodString>;
    cost: z.ZodNumber;
    sellingPrice: z.ZodNumber;
    quantity: z.ZodNumber;
    supplier: z.ZodString;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    partName?: string;
    partType?: string;
    compatibleDevices?: string;
    cost?: number;
    sellingPrice?: number;
    quantity?: number;
    supplier?: string;
}, {
    shop_id?: string;
    partName?: string;
    partType?: string;
    compatibleDevices?: string;
    cost?: number;
    sellingPrice?: number;
    quantity?: number;
    supplier?: string;
}>;
export declare const insertSupplierSchema: z.ZodObject<{
    name: z.ZodString;
    contactNumber: z.ZodOptional<z.ZodString>;
    address: z.ZodOptional<z.ZodString>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    shop_id?: string;
    contactNumber?: string;
    address?: string;
}, {
    name?: string;
    shop_id?: string;
    contactNumber?: string;
    address?: string;
}>;
export declare const insertPurchaseOrderSchema: z.ZodObject<{
    supplierId: z.ZodNumber;
    itemName: z.ZodString;
    quantity: z.ZodNumber;
    unitCost: z.ZodNumber;
    totalCost: z.ZodNumber;
    status: z.ZodOptional<z.ZodString>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    status?: string;
    quantity?: number;
    supplierId?: number;
    itemName?: string;
    unitCost?: number;
    totalCost?: number;
}, {
    shop_id?: string;
    status?: string;
    quantity?: number;
    supplierId?: number;
    itemName?: string;
    unitCost?: number;
    totalCost?: number;
}>;
export declare const insertSupplierPaymentSchema: z.ZodObject<{
    supplierId: z.ZodNumber;
    amount: z.ZodNumber;
    paymentMethod: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    paymentMethod?: string;
    supplierId?: number;
    amount?: number;
    description?: string;
}, {
    shop_id?: string;
    paymentMethod?: string;
    supplierId?: number;
    amount?: number;
    description?: string;
}>;
export declare const insertExpenditureSchema: z.ZodObject<{
    description: z.ZodString;
    amount: z.ZodNumber;
    category: z.ZodString;
    paymentMethod: z.ZodString;
    recipient: z.ZodOptional<z.ZodString>;
    items: z.ZodOptional<z.ZodString>;
    paidAmount: z.ZodOptional<z.ZodNumber>;
    remainingAmount: z.ZodOptional<z.ZodNumber>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    paymentMethod?: string;
    amount?: number;
    description?: string;
    category?: string;
    recipient?: string;
    items?: string;
    paidAmount?: number;
    remainingAmount?: number;
}, {
    shop_id?: string;
    paymentMethod?: string;
    amount?: number;
    description?: string;
    category?: string;
    recipient?: string;
    items?: string;
    paidAmount?: number;
    remainingAmount?: number;
}>;
export declare const insertGroupedExpenditureSchema: z.ZodObject<{
    providerName: z.ZodString;
    category: z.ZodString;
    totalAmount: z.ZodNumber;
    periodStart: z.ZodDate;
    periodEnd: z.ZodDate;
    description: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodString>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    status?: string;
    description?: string;
    category?: string;
    providerName?: string;
    totalAmount?: number;
    periodStart?: Date;
    periodEnd?: Date;
}, {
    shop_id?: string;
    status?: string;
    description?: string;
    category?: string;
    providerName?: string;
    totalAmount?: number;
    periodStart?: Date;
    periodEnd?: Date;
}>;
export declare const insertGroupedExpenditurePaymentSchema: z.ZodObject<{
    groupedExpenditureId: z.ZodNumber;
    amount: z.ZodNumber;
    paymentMethod: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    shop_id?: string;
    paymentMethod?: string;
    amount?: number;
    description?: string;
    groupedExpenditureId?: number;
}, {
    shop_id?: string;
    paymentMethod?: string;
    amount?: number;
    description?: string;
    groupedExpenditureId?: number;
}>;
export declare const insertUserSchema: z.ZodObject<{
    username: z.ZodString;
    password: z.ZodString;
    role: z.ZodOptional<z.ZodString>;
    permanent: z.ZodOptional<z.ZodBoolean>;
    shop_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    username?: string;
    password?: string;
    role?: string;
    shop_id?: string;
    permanent?: boolean;
}, {
    username?: string;
    password?: string;
    role?: string;
    shop_id?: string;
    permanent?: boolean;
}>;
export declare const insertBillSchema: z.ZodObject<{
    customerName: z.ZodString;
    customerPhone: z.ZodOptional<z.ZodString>;
    customerEmail: z.ZodUnion<[z.ZodOptional<z.ZodString>, z.ZodLiteral<"">]>;
    customerAddress: z.ZodOptional<z.ZodString>;
    billNumber: z.ZodString;
    totalAmount: z.ZodNumber;
    taxAmount: z.ZodOptional<z.ZodNumber>;
    discountAmount: z.ZodOptional<z.ZodNumber>;
    finalAmount: z.ZodNumber;
    paymentStatus: z.ZodOptional<z.ZodString>;
    paymentMethod: z.ZodOptional<z.ZodString>;
    dueDate: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    customerName?: string;
    paymentMethod?: string;
    totalAmount?: number;
    customerPhone?: string;
    customerEmail?: string;
    customerAddress?: string;
    billNumber?: string;
    taxAmount?: number;
    discountAmount?: number;
    finalAmount?: number;
    paymentStatus?: string;
    dueDate?: string;
    notes?: string;
    shopId?: string;
}, {
    customerName?: string;
    paymentMethod?: string;
    totalAmount?: number;
    customerPhone?: string;
    customerEmail?: string;
    customerAddress?: string;
    billNumber?: string;
    taxAmount?: number;
    discountAmount?: number;
    finalAmount?: number;
    paymentStatus?: string;
    dueDate?: string;
    notes?: string;
    shopId?: string;
}>;
export declare const insertNotificationSchema: z.ZodObject<{
    title: z.ZodString;
    message: z.ZodString;
    type: z.ZodOptional<z.ZodString>;
    userId: z.ZodOptional<z.ZodNumber>;
    priority: z.ZodOptional<z.ZodString>;
    actionUrl: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string;
    type?: string;
    shopId?: string;
    title?: string;
    userId?: number;
    priority?: string;
    actionUrl?: string;
    metadata?: Record<string, any>;
}, {
    message?: string;
    type?: string;
    shopId?: string;
    title?: string;
    userId?: number;
    priority?: string;
    actionUrl?: string;
    metadata?: Record<string, any>;
}>;
export declare const insertSettingSchema: z.ZodObject<{
    userId: z.ZodOptional<z.ZodNumber>;
    settingKey: z.ZodString;
    settingValue: z.ZodAny;
    settingType: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    isPublic: z.ZodOptional<z.ZodBoolean>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    shopId?: string;
    userId?: number;
    settingKey?: string;
    settingValue?: any;
    settingType?: string;
    isPublic?: boolean;
}, {
    description?: string;
    shopId?: string;
    userId?: number;
    settingKey?: string;
    settingValue?: any;
    settingType?: string;
    isPublic?: boolean;
}>;
export declare const insertActivityLogSchema: z.ZodObject<{
    userId: z.ZodOptional<z.ZodNumber>;
    action: z.ZodString;
    entityType: z.ZodString;
    entityId: z.ZodOptional<z.ZodNumber>;
    description: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    ipAddress: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    shopId?: string;
    userId?: number;
    metadata?: Record<string, any>;
    action?: string;
    entityType?: string;
    entityId?: number;
    ipAddress?: string;
    userAgent?: string;
}, {
    description?: string;
    shopId?: string;
    userId?: number;
    metadata?: Record<string, any>;
    action?: string;
    entityType?: string;
    entityId?: number;
    ipAddress?: string;
    userAgent?: string;
}>;
export declare const insertPermissionSchema: z.ZodObject<{
    role: z.ZodString;
    resource: z.ZodString;
    action: z.ZodString;
    allowed: z.ZodOptional<z.ZodBoolean>;
    conditions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role?: string;
    shopId?: string;
    action?: string;
    resource?: string;
    allowed?: boolean;
    conditions?: Record<string, any>;
}, {
    role?: string;
    shopId?: string;
    action?: string;
    resource?: string;
    allowed?: boolean;
    conditions?: Record<string, any>;
}>;
export declare const insertReportSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    generatedBy: z.ZodOptional<z.ZodNumber>;
    shopId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    description?: string;
    type?: string;
    shopId?: string;
    parameters?: Record<string, any>;
    generatedBy?: number;
}, {
    name?: string;
    description?: string;
    type?: string;
    shopId?: string;
    parameters?: Record<string, any>;
    generatedBy?: number;
}>;
export declare const searchSchema: z.ZodObject<{
    query: z.ZodString;
    type: z.ZodOptional<z.ZodString>;
    limit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type?: string;
    query?: string;
    limit?: number;
}, {
    type?: string;
    query?: string;
    limit?: number;
}>;
export declare const smsSchema: z.ZodObject<{
    to: z.ZodString;
    message: z.ZodString;
    from: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string;
    to?: string;
    from?: string;
}, {
    message?: string;
    to?: string;
    from?: string;
}>;
export declare const feedbackSchema: z.ZodObject<{
    message: z.ZodString;
    rating: z.ZodOptional<z.ZodNumber>;
    category: z.ZodOptional<z.ZodString>;
    userId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    category?: string;
    message?: string;
    userId?: number;
    rating?: number;
}, {
    category?: string;
    message?: string;
    userId?: number;
    rating?: number;
}>;
export type InsertTransaction = z.infer<typeof insertTransactionSchema> & {
    createdBy?: string;
};
export type Transaction = typeof transactions.$inferSelect;
export type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;
export type InventoryItem = typeof inventoryItems.$inferSelect;
export type InsertSupplier = z.infer<typeof insertSupplierSchema> & {
    createdBy?: string;
};
export type Supplier = typeof suppliers.$inferSelect;
export type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;
export type PurchaseOrder = typeof purchaseOrders.$inferSelect;
export type InsertSupplierPayment = z.infer<typeof insertSupplierPaymentSchema>;
export type SupplierPayment = typeof supplierPayments.$inferSelect;
export type InsertExpenditure = z.infer<typeof insertExpenditureSchema> & {
    createdBy?: string;
    remaining?: number;
};
export type Expenditure = typeof expenditures.$inferSelect;
export type InsertGroupedExpenditure = z.infer<typeof insertGroupedExpenditureSchema>;
export type GroupedExpenditure = typeof groupedExpenditures.$inferSelect;
export type InsertGroupedExpenditurePayment = z.infer<typeof insertGroupedExpenditurePaymentSchema>;
export type GroupedExpenditurePayment = typeof groupedExpenditurePayments.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type InsertBill = z.infer<typeof insertBillSchema>;
export type InsertNotification = z.infer<typeof insertNotificationSchema>;
export type InsertSetting = z.infer<typeof insertSettingSchema>;
export type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;
export type InsertPermission = z.infer<typeof insertPermissionSchema>;
export type InsertReport = z.infer<typeof insertReportSchema>;
export type SearchQuery = z.infer<typeof searchSchema>;
export type SMSRequest = z.infer<typeof smsSchema>;
export type FeedbackRequest = z.infer<typeof feedbackSchema>;
//# sourceMappingURL=schema.d.ts.map