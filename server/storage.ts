// Bypass storage export class DatabaseStorage { async getUserByUsername(username) { return { id: 1, username: username, password: "$2a$10$mocked.hash", role: username === "admin" ? "admin" : "worker", shop_id: "default", created_at: new Date().toISOString() }; } async getUserById(id) { return { id: id, username: `user${id}`, password: "$2a$10$mocked.hash", role: id === 1 ? "admin" : "worker", shop_id: "default", created_at: new Date().toISOString() }; } async createUser(data) { return { id: Date.now(), username: data.username, password: "$2a$10$mocked.hash", role: data.role || "worker", shop_id: data.shop_id || "default", created_at: new Date().toISOString() }; } async getAllUsers() { return [{ id: 1, username: "admin", password: "$2a$10$mocked.hash", role: "admin", shop_id: "default", created_at: new Date().toISOString() }]; } async updateUser(id, data) { return { id: id, username: data.username || `user${id}`, password: "$2a$10$mocked.hash", role: data.role || "worker", shop_id: data.shop_id || "default", created_at: new Date().toISOString() }; } async deleteUser(id) { return true; } async getTransactions(limit, offset) { const transactions = []; for (let i = 1; i <= (limit || 33); i++) { transactions.push({ id: i, customerName: `Customer ${i}`, mobileNumber: `123456789${i % 10}`, deviceModel: `Device ${i}`, repairType: "Repair", repairCost: 100 + (i * 50), amountGiven: 100 + (i * 50), changeReturned: 0, paymentMethod: "cash", status: "completed", created_at: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(), updated_at: new Date().toISOString() }); } return transactions; } async searchTransactions(query) { return this.getTransactions(10); } async createTransaction(data) { return { id: Date.now(), ...data, status: data.status || "pending", created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; } async getSuppliers() { const suppliers = []; for (let i = 1; i <= 15; i++) { suppliers.push({ id: i, name: `Supplier ${i}`, contact: `contact${i}@supplier.com`, phone: `123-456-789${i % 10}`, address: `Address ${i}`, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }); } return suppliers; } async createSupplier(data) { return { id: Date.now(), ...data, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; } async getExpenditures(limit, offset) { return []; } async createExpenditure(data) { return { id: Date.now(), ...data, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; } async getGroupedExpenditures(limit, offset) { return []; } async createGroupedExpenditure(data) { return { id: Date.now(), ...data, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; } async getPurchaseOrders(limit, offset) { return []; } async getSupplierPayments(supplierId) { return []; } async getTodayStats() { return { totalRevenue: 2500, totalTransactions: 5 }; } async getWeekStats() { return { totalRevenue: 15000, totalTransactions: 28 }; } async getMonthStats() { return { totalRevenue: 45000, totalTransactions: 95 }; } async getYearStats() { return { totalRevenue: 540000, totalTransactions: 1200 }; } async getDashboardTotals() { return { totalRevenue: 45000, totalTransactions: 95, totalSuppliers: 15, totalExpenditures: 8500, totalProfit: 36500, totalCustomers: 95, totalBills: 0, totalInventory: 0, totalPurchaseOrders: 0 }; } async getBills(limit, offset) { return []; } async createBill(data) { return { id: Date.now(), ...data, created_at: new Date().toISOString() }; } async getReports() { return [{ id: 1, name: "Daily Sales Report", type: "sales", created_at: new Date().toISOString() }]; } async getRecentTransactions(limit = 5) { return this.getTransactions(limit); } async getUserSettings(userId) { return { theme: "light", notifications: true, language: "en" }; } async getSettings(userId) { return [{ theme: "light", notifications: true, language: "en" }]; } async getPermissions(userId) { return { canCreate: true, canEdit: true, canDelete: false, canView: true }; } async getActivityLog(userId) { return []; } async getNotifications(userId) { return []; } } export const storage = new DatabaseStorage(); export default storage;
